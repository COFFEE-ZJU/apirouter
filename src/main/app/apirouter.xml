<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo"
	xmlns:ws="http://www.mulesoft.org/schema/mule/ws" xmlns:mulexml="http://www.mulesoft.org/schema/mule/xml"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:data-mapper="http://www.mulesoft.org/schema/mule/ee/data-mapper"
	xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core"
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" version="EE-3.5.1"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/ws http://www.mulesoft.org/schema/mule/ws/current/mule-ws.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/ee/data-mapper http://www.mulesoft.org/schema/mule/ee/data-mapper/current/mule-data-mapper.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/xml http://www.mulesoft.org/schema/mule/xml/current/mule-xml.xsd
http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/current/mule-mongo.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">
	<ws:consumer-config name="Web_Service_Consumer"
		wsdlLocation="WeatherWebService.wsdl" service="WeatherWebService"
		port="WeatherWebServiceSoap"
		serviceAddress="http://webservice.webxml.com.cn/WebServices/WeatherWebService.asmx"
		doc:name="Web Service Consumer" />
	<data-mapper:config name="Map_To_Xml_getWeatherbyCityName_"
		transformationGraphPath="map_to_xml_getweatherbycityname_.grf"
		doc:name="Map_To_Xml_getWeatherbyCityName_" />
	<mongo:config name="Mongo_DB" database="muledb" doc:name="Mongo DB"
		host="127.0.0.1" password="123456" username="mule" />
	<object-to-string-transformer name="Object_to_String"
		doc:name="Object to String" />

	<flow name="apirouter" doc:name="apirouter">
		<http:inbound-endpoint address="http://localhost:8081"
			exchange-pattern="request-response" doc:name="HTTP" />
		<logger
			message="The http.request received is #[message.inboundProperties['http.request']] \n
    	The http.query.params received is #[message.inboundProperties['http.query.params']]"
			level="INFO" doc:name="Logger" />
        <custom-transformer class="cn.edu.zju.ccnt.RequestPreprocessor" doc:name="Java"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.needsCache]">
                <flow-ref name="invokeFlowWithMongoCache" doc:name="Flow Reference"/>
            </when>
            <otherwise>
                <flow-ref name="REST_JSON_InvokeFlow" doc:name="Flow Reference"/>
            </otherwise>
        </choice>

		<!-- custom-transformer class="cn.edu.zju.ccnt.RequestTransformer" doc:name="Java"/ -->

		<!-- logger message="The http.request after is #[header:INBOUND:http.request] 
			and method is #[header:INBOUND:http.method]" level="INFO" doc:name="Logger"/ -->
		<http:response-builder status="200"
			contentType="application/json;charset=utf-8" doc:name="HTTP Response Builder" />
	</flow>
    <sub-flow name="invokeFlowWithMongoCache" doc:name="invokeFlowWithMongoCache">
        <first-successful doc:name="First Successful">
            <processor-chain>
                <custom-transformer class="cn.edu.zju.ccnt.MongoQueryGenerator" doc:name="Java"/>
                <mongo:find-one-object config-ref="Mongo_DB" collection="#[flowVars.mongoCollectionName]" doc:name="Mongo DB"/>
                <custom-transformer class="cn.edu.zju.ccnt.Mongo2Json" doc:name="Java"/>
            </processor-chain>
            <flow-ref name="REST_JSON_InvokeFlow" doc:name="Flow Reference"/>
        </first-successful>
    </sub-flow>
    <flow name="REST_JSON_InvokeFlow" doc:name="REST_JSON_InvokeFlow">
        <set-variable variableName="requestSpec" value="#[flowVars.requestSpecs.poll()]" doc:name="Variable"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.requestSpec.isMethodGet()]">
                <http:outbound-endpoint exchange-pattern="request-response" method="GET" address="http://#[flowVars.requestSpec.getUrl()]#[flowVars.requestSpec.getParamsGenerator().generateParamString(flowVars.requstParams)]" doc:name="HTTP"/>
            </when>
            <otherwise>
                <set-payload value="#[flowVars.requestSpec.getParamsGenerator().generateParamString(flowVars.requstParams)]" doc:name="Set Payload"/>
                <http:outbound-endpoint exchange-pattern="request-response" method="POST" address="http://#[flowVars.requestSpec.getUrl()]" contentType="application/x-www-form-urlencoded" doc:name="HTTP"/>
            </otherwise>
        </choice>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <logger message="resp #[payload]" level="INFO" doc:name="Logger"/>
        <expression-transformer expression="#[flowVars.requestSpec.getResultStandardizer().standardize(payload,flowVars.requstParams)]" doc:name="Expression"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.needsCache]">
                <mongo:save-object config-ref="Mongo_DB" collection="#[flowVars.mongoCollectionName]" doc:name="Mongo DB"/>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
            </when>
            <otherwise>
                <json:object-to-json-transformer doc:name="Object to JSON"/>
            </otherwise>
        </choice>
        <catch-exception-strategy doc:name="Catch Exception Strategy:">
            <choice doc:name="Choice">
                <when expression="#[flowVars.requestSpecs.isEmpty()]">
                    <custom-transformer class="cn.edu.zju.ccnt.ErrorResultGenerator" doc:name="Java"/>
                    <json:object-to-json-transformer doc:name="Object to JSON"/>
                </when>
                <otherwise>
                    <flow-ref name="REST_JSON_InvokeFlow" doc:name="Flow Reference"/>
                </otherwise>
            </choice>
        </catch-exception-strategy>
    </flow>

	<!-- sub-flow name="invokeService" doc:name="invokeService"> <choice doc:name="Choice"> 
		<when expression="#[flowVars.hasFormatError]"> <set-payload value="{&quot;success&quot;:false,&quot;reason&quot;:&quot;#[flowVars.formatErrReason]&quot;}" 
		doc:name="Set Payload"/> </when> <when expression="#[flowVars.httpMethod.equals('GET')]"> 
		<http:outbound-endpoint exchange-pattern="request-response" method="GET" 
		address="http://#[flowVars.reqHost]#[flowVars.reqPath]" doc:name="HTTP"/> 
		</when> <when expression="#[flowVars.httpMethod.equals('POST')]"> <http:outbound-endpoint 
		exchange-pattern="request-response" method="POST" address="http://#[flowVars.reqHost]#[flowVars.reqPath]" 
		contentType="application/x-www-form-urlencoded" doc:name="HTTP"/> </when> 
		<otherwise> <http:outbound-endpoint exchange-pattern="request-response" method="PUT" 
		address="http://#[flowVars.reqHost]#[flowVars.reqPath]" doc:name="HTTP"/> 
		</otherwise> </choice> <logger message="Response code is #[header:INBOUND:http.status]" 
		level="INFO" doc:name="Logger"/> </sub-flow -->

	<!--sub-flow name="dispatcher" doc:name="dispatcher">
		<choice doc:name="Choice">
			<when
				expression="#[message.inboundProperties['http.request'].contains('/weather/')]">
				<flow-ref name="invokeFlowWithMongoCache" doc:name="Flow Reference" />
			</when>
			<when
				expression="#[message.inboundProperties['http.request'].contains('/train/')]">
				<custom-transformer class="cn.edu.zju.ccnt.TrainRequestTransformer"
					doc:name="Java" />
			</when>
			<when
				expression="#[message.inboundProperties['http.request'].contains('/flight/')]">
				<custom-transformer class="cn.edu.zju.ccnt.FlightRequestTransformer"
					doc:name="Java" />
			</when>
			<when
				expression="#[message.inboundProperties['http.request'].contains('/bus/')]">
				<custom-transformer class="cn.edu.zju.ccnt.BusRequestTransformer"
					doc:name="Java" />
			</when>
			<when
				expression="#[message.inboundProperties['http.request'].contains('/taxi/')]">
				<custom-transformer class="cn.edu.zju.ccnt.TaxiRequestTransformer"
					doc:name="Java" />
			</when>
			<when
				expression="#[message.inboundProperties['http.request'].contains('/hotel/')]">
				<custom-transformer class="cn.edu.zju.ccnt.HotelRequestTransformer"
					doc:name="Java" />
			</when>
			<when
				expression="#[message.inboundProperties['http.request'].contains('/restaurant/')]">
				<custom-transformer class="cn.edu.zju.ccnt.RestaurantRequestTransformer"
					doc:name="Java" />
			</when>
			<otherwise>
				<custom-transformer class="cn.edu.zju.ccnt.DefaultRequestTransformer"
					doc:name="Java" />
			</otherwise>
		</choice>
	</sub-flow -->

</mule>
